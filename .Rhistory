fillOpacity = 0.9,
smoothFactor = 0.5,
color = "black",
fillColor = ~dmvPalettePerCap((Cases / TOTAL_POP_100K)),
weight = 0.5,
label = legendTextPerCap,
labelOptions = labelOptions(
style = list("font-weight" = "normal", padding = "3px 8px"),
textsize = "13px",
direction = "auto"
)) %>%
addLegend( pal=dmvPalettePerCap, values=~(Cases / TOTAL_POP_100K), opacity=0.9, title = htmltools::HTML(paste("DMV Covid-19 Case Rate <br> per 100k on", Sys.Date() - 1)), position = "topright" )
Sys.sleep(15)
mapshot(dmvChloroplethPerCap, url = "dmvChloroplethPerCap.html")
str(DMV_Cases)
DMV_Cases %>%
filter(GEOID %in% c("516815"))
Full_States %>%
filter(County == "Manassas Park")
Full_States %>%
filter(County == "Falls Church")
Full_States %>%
filter(County == "Fairfax City")
DMV_Cases %>%
filter(GEOID == "51600")
DMV_Cases %>%
filter(GEOID %in% c("516815"))
DMV_Cases %>%
filter(GEOID %in% c("24021"))
DMV_Cases %>%
filter(GEOID %in% c("516815"))
DMV_Cases %>%
filter(GEOID == "51600")
counties %>%
mutate(GEOID = as.character(GEOID)) %>%
mutate(NAME = case_when(GEOID == "51600" ~ NAME = "Fairfax City"), T ~ NAME) %>%
filter(GEOID == "51600")
counties
DMV[GEOID == "51600"]
DMV$GEOID
str(DMV)
DMV[DMV$GEOID == "51600"]
DMV$GEOID == "51600"
DMV[DMV$GEOID == "51600",]
DMV[DMV$GEOID == "51600",]$NAME
DMV[DMV$GEOID == "51600",]$NAMELSAD
DMV[DMV$GEOID == "51600",]
DMV[DMV$GEOID == "51600",]$NAME
DMV[DMV$GEOID == "51600",]$NAME <- "Fairfax City"
counties <- st_read("tl_2019_us_county.shp")
DMV <- counties %>%
mutate(GEOID = as.character(GEOID), NAME = as.character(NAME)) %>%
filter(GEOID %in% DMV_FIPS) %>%
left_join(stateCountyPops, by = c("GEOID" = "FIPS"))
setwd("/home/adrian/Documents/DCist_Covid-19_Analysis")
counties <- st_read("tl_2019_us_county.shp")
DMV <- counties %>%
mutate(GEOID = as.character(GEOID), NAME = as.character(NAME)) %>%
filter(GEOID %in% DMV_FIPS) %>%
left_join(stateCountyPops, by = c("GEOID" = "FIPS"))
DMV[DMV$GEOID == "51600",]$NAME <- "Fairfax City"
DMV[DMV$GEOID == "51600",]
DMV_Cases <- DMV %>%
left_join(DMV_Counties_Covid_Cases_Today, by = c("GEOID" = "FIPS"))
DMV_Cases <- DMV_Cases %>%
mutate(Cases = if_else(is.na(Cases), 0, Cases))
st_crs(DMV_Cases) <- "+proj=longlat +datum=WGS84"
dmvChloropleth <- leaflet(DMV_Cases) %>%
addTiles(attribution = attribution) %>%
setView(lat = "38.8858", lng = "-77.1054", zoom = 8) %>%
addPolygons(stroke=T,
opacity = 1,
fillOpacity = 0.9,
smoothFactor = 0.5,
color = "black",
fillColor = ~dmvPaletteReg(Cases),
weight = 0.5,
label = legendText,
labelOptions = labelOptions(
style = list("font-weight" = "normal", padding = "3px 8px"),
textsize = "13px",
direction = "auto"
)) %>%
addLegend( pal=dmvPaletteReg, values=~Cases, opacity=0.9, title = paste("DMV Covid-19 Cases on", Sys.Date() - 1), position = "topright" )
dmvChloropleth
legendText <- paste0(
"County: ", DMV_Cases$NAME, "<br/>",
"State: ", DMV_Cases$State, "<br/>",
"Cases: ", DMV_Cases$Cases, "<br/>"
) %>%
lapply(htmltools::HTML)
leaflet(DMV_Cases) %>%
addTiles(attribution = attribution) %>%
setView(lat = "38.8858", lng = "-77.1054", zoom = 8) %>%
addPolygons(stroke=T,
opacity = 1,
fillOpacity = 0.9,
smoothFactor = 0.5,
color = "black",
fillColor = ~dmvPaletteReg(Cases),
weight = 0.5,
label = legendText,
labelOptions = labelOptions(
style = list("font-weight" = "normal", padding = "3px 8px"),
textsize = "13px",
direction = "auto"
)) %>%
addLegend( pal=dmvPaletteReg, values=~Cases, opacity=0.9, title = paste("DMV Covid-19 Cases on", Sys.Date() - 1), position = "topright" )
myBinsReg <- round(seq(from = 0, to = (max(DMV_Cases$Cases) + 1), by = (max(DMV_Cases$Cases) / 6)), 0)
dmvPaletteReg <- colorBin(palette = "YlOrRd", domain = DMV_Cases$Cases, na.color = "transparent", bins = myBinsReg)
leaflet(DMV_Cases) %>%
addTiles(attribution = attribution) %>%
setView(lat = "38.8858", lng = "-77.1054", zoom = 8) %>%
addPolygons(stroke=T,
opacity = 1,
fillOpacity = 0.9,
smoothFactor = 0.5,
color = "black",
fillColor = ~dmvPaletteReg(Cases),
weight = 0.5,
label = legendText,
labelOptions = labelOptions(
style = list("font-weight" = "normal", padding = "3px 8px"),
textsize = "13px",
direction = "auto"
)) %>%
addLegend( pal=dmvPaletteReg, values=~Cases, opacity=0.9, title = paste("DMV Covid-19 Cases on", Sys.Date() - 1), position = "topright" )
library(rvest)
library(htmltools)
library(htmlwidgets)
library(RColorBrewer)
library(xml2)
library(curl)
library(httr)
library(splashr)
library(stevedore)
library(rlist)
library(lubridate)
library(RSelenium)
library(wdman)
library(devtools)
library(pdftools)
library(sf)
library(raster)
library(sp)
library(rgdal)
library(leaflet)
library(plotly)
library(mapview)
library(readxl)
library(scales)
library(tidyverse)
stateConversions <- tibble(Full_Name = state.name, Abbr = state.abb)
stateConversions <- bind_rows(stateConversions, tibble(Full_Name = "District of Columbia", Abbr = "DC")) %>%
arrange(Full_Name)
countyStateFIPS <- read_csv("countyFIPSCodes2019.csv")
countyStateFIPS <- bind_rows(countyStateFIPS, tibble(FIPS = 11001, Name = "District of Columbia", State = "DC"))
stateCountyPops <- read_csv("co-est2019-alldata.csv", col_types = cols_only(SUMLEV = "c", STATE = "c", COUNTY = "c", STNAME = "c", CTYNAME = "c", POPESTIMATE2019 = "n"))
stateCountyPops <- stateCountyPops %>%
mutate(FIPS = str_c(STATE, COUNTY), TOTAL_POP = POPESTIMATE2019, TOTAL_POP_100K = POPESTIMATE2019 / 100000)
Sys.sleep(10)
system('docker pull selenium/standalone-firefox')
Sys.sleep(10)
system('docker run -t -d -p 4445:4444 --memory 1024mb --shm-size 2g selenium/standalone-firefox')
Sys.sleep(10)
remDr <- remoteDriver(remoteServerAddr = "localhost", port = 4445L, browserName = "firefox")
Sys.sleep(10)
remDr$open()
Sys.sleep(10)
remDr$navigate("https://dhhr.wv.gov/COVID-19/Pages/default.aspx")
Sys.sleep(30)
WV_Counties <- remDr$findElement(using = 'xpath', value = '/html/body/form/div[6]/div/div/div[1]/table/tbody/tr/td/table/tbody/tr/td/div/table/tbody/tr/td/div/div[6]/p[1]')
WV_Counties <- WV_Counties$getElementText()
Sys.sleep(10)
remDr$navigate("https://coronavirus.maryland.gov/")
Sys.sleep(30)
### Maryland Scraping
# MD_Counties <- remDr$findElements(using = 'class', value = 'topBoxH1Text')
# Sys.sleep(10)
MD_Deaths_Hospitalizations_Tests <- remDr$findElement(using = 'xpath', value = '/html/body/div[2]/div[5]/div[3]/div/div[1]/div/section[5]/div/div/div[2]/div/div/p[1]')
confirmedCasesDeathsHospitalizationsTests <- MD_Deaths_Hospitalizations_Tests$getElementText()
confirmedCasesDeathsHospitalizationsTests
WV_Counties
Sys.sleep(10)
# confirmedCasesAndDeaths <- CC_D()
# CNTY_C <- MD_Counties[[2]]$getElementText
# casesByCounty <- CNTY_C()
MD_Counties_Path <- remDr$findElement(using = 'xpath', value = '/html/body/div[2]/div[5]/div[3]/div/div[1]/div/section[5]/div/div/div[2]/div/div/table')
casesByCounty <- MD_Counties_Path$getElementAttribute("outerHTML")[[1]] %>% read_html(useInternalNodes = T) %>% html_table(fill = T)
casesByCounty
Sys.sleep(10)
MD_AgeSex_Path <- remDr$findElement(using = 'xpath', value = '/html/body/div[2]/div[5]/div[3]/div/div[1]/div/section[5]/div/div/div[2]/div/div/strong/table')
casesByAgeAndSex <- MD_AgeSex_Path$getElementAttribute("outerHTML")[[1]] %>% read_html(useInternalNodes = T) %>% html_table(fill = T)
casesByAgeAndSex
Sys.sleep(10)
remDr$navigate("http://www.vdh.virginia.gov/coronavirus/")
Sys.sleep(30)
virginiaDownloadLinkCasesByCounty <- remDr$findElement(using = "xpath", value = "/html/body/div[3]/div[2]/div/main/article/div/div/div[2]/div/div/div/div/div/div[1]/div[2]/div/p[1]/a")
Sys.sleep(10)
virginiaDownloadLinkCasesByCountyURL <- virginiaDownloadLinkCasesByCounty$getElementAttribute("href")
Sys.sleep(10)
virginiaDownloadLinkCasesByCountyURL <- unlist(virginiaDownloadLinkCasesByCountyURL)
download.file(virginiaDownloadLinkCasesByCountyURL, destfile = "Virginia_By_County_Today.csv")
Sys.sleep(10)
virginiaDownloadLinkCasesByAge <- remDr$findElement(using = "xpath", value = "/html/body/div[3]/div[2]/div/main/article/div/div/div[2]/div/div/div/div/div/div[1]/div[2]/div/p[2]/a")
Sys.sleep(10)
virginiaDownloadLinkCasesByAgeURL <- virginiaDownloadLinkCasesByAge$getElementAttribute("href")
Sys.sleep(10)
virginiaDownloadLinkCasesByAgeURL <- unlist(virginiaDownloadLinkCasesByAgeURL)
download.file(virginiaDownloadLinkCasesByAgeURL, destfile = "Virginia_By_Age_Today.csv")
Sys.sleep(10)
virginiaDownloadLinkCasesBySex <- remDr$findElement(using = "xpath", value = "/html/body/div[3]/div[2]/div/main/article/div/div/div[2]/div/div/div/div/div/div[1]/div[2]/div/p[3]/a[2]")
Sys.sleep(10)
virginiaDownloadLinkCasesBySexURL <- virginiaDownloadLinkCasesBySex$getElementAttribute("href")
Sys.sleep(10)
virginiaDownloadLinkCasesBySexURL <- unlist(virginiaDownloadLinkCasesBySexURL)
download.file(virginiaDownloadLinkCasesBySexURL, destfile = "Virginia_By_Sex_Today.csv")
Sys.sleep(10)
virginiaDownloadLinkCasesByRace <- remDr$findElement(using = "xpath", value = "/html/body/div[3]/div[2]/div/main/article/div/div/div[2]/div/div/div/div/div/div[1]/div[2]/div/p[4]/a[2]")
Sys.sleep(10)
virginiaDownloadLinkCasesByRaceURL <- virginiaDownloadLinkCasesByRace$getElementAttribute("href")
Sys.sleep(10)
virginiaDownloadLinkCasesByRaceURL <- unlist(virginiaDownloadLinkCasesByRaceURL)
download.file(virginiaDownloadLinkCasesByRaceURL, destfile = "Virginia_By_Race_Today.csv")
remDr$close()
Sys.sleep(10)
system("docker stop $(docker ps -a -q)")
system("docker rm $(docker ps -a -q)")
system("docker container prune -f")
system("docker image prune -f")
Sys.sleep(10)
WV_Counties <- WV_Counties %>%
str_split(": ")
WV_Counties <- WV_Counties[[1]][2]
WV_CountiesDF <- WV_Counties %>%
str_replace_all("\\(", "") %>%
str_replace_all("\\)", "") %>%
str_split(", ") %>%
as_tibble("Combined")
names(WV_CountiesDF) <- "Combined"
WV_CountiesDFCleaned <- WV_CountiesDF %>%
separate(Combined, into = c("County", "Cases"), sep = " ") %>%
mutate(Cases = as.integer(Cases))
WV_CountiesDFCleaned$Date <- Sys.Date()
WV_CountiesDFCleaned$State <- "West Virginia"
WV_CountiesDFCleaned <- WV_CountiesDFCleaned %>%
left_join(stateConversions, by = c("State" = "Full_Name")) %>%
left_join(countyStateFIPS, by = c("Abbr" = "State", "County" = "Name")) %>%
dplyr::select(County, Cases, Date, State, Abbr, FIPS)
WV_CountiesDFCleaned
WV_Counties <- read_csv("WV_Counties.csv")
WV_Counties
WV_CountiesDFCleaned
WV_Counties <- bind_rows(WV_CountiesDFCleaned, WV_Counties)
write_csv(WV_Counties, "WV_Counties.csv")
casesByCounty <- casesByCounty[[1]]
colnames(casesByCounty) <- c("County", "Cases")
casesByCounty %>%
mutate(Date = Sys.Date(), State = "Maryland", County = str_remove_all(County, "['\\.]")) %>%
left_join(stateConversions, by = c("State" = "Full_Name")) %>%
left_join(countyStateFIPS, by = c("Abbr" = "State", "County" = "Name")) %>%
dplyr::select(County, Cases, Date, State, Abbr, FIPS)
MD_By_County_Today <- casesByCounty %>%
mutate(Date = Sys.Date(), State = "Maryland", County = str_remove_all(County, "['\\.]")) %>%
left_join(stateConversions, by = c("State" = "Full_Name")) %>%
left_join(countyStateFIPS, by = c("Abbr" = "State", "County" = "Name")) %>%
dplyr::select(County, Cases, Date, State, Abbr, FIPS)
MD_By_County_Today
MD_By_County <- read_csv("MD_By_County.csv")
MD_By_County <- bind_rows(MD_By_County_Today, MD_By_County)
write_csv(MD_By_County, "MD_By_County.csv")
confirmedCasesDeathsHospitalizationsTests %>%
str_split("\n") %>%
lapply(str_remove_all, "Number of ") %>%
lapply(str_remove_all, "ever hospitalized") %>%
lapply(str_remove_all, ",") %>%
as_tibble(.name_repair = "universal") %>%
separate(...1, into = c("Measure", "Amount"), sep = ": ") %>%
mutate(Amount = as.integer(Amount)) %>%
mutate(Date = Sys.Date()) %>%
pivot_wider(names_from = Measure, values_from = Amount) %>%
mutate(Cases = `Confirmed Cases`, Tests = `negative test results`, State = "Maryland") %>%
mutate(Tests = sum(Tests, sum(MD_By_County_Today$Cases))) %>%
select(Tests, Deaths, Hospitalizations, Date, State)
MD_Summary_Today <- confirmedCasesDeathsHospitalizationsTests %>%
str_split("\n") %>%
lapply(str_remove_all, "Number of ") %>%
lapply(str_remove_all, "ever hospitalized") %>%
lapply(str_remove_all, ",") %>%
as_tibble(.name_repair = "universal") %>%
separate(...1, into = c("Measure", "Amount"), sep = ": ") %>%
mutate(Amount = as.integer(Amount)) %>%
mutate(Date = Sys.Date()) %>%
pivot_wider(names_from = Measure, values_from = Amount) %>%
mutate(Cases = `Confirmed Cases`, Tests = `negative test results`, State = "Maryland") %>%
mutate(Tests = sum(Tests, sum(MD_By_County_Today$Cases))) %>%
select(Tests, Deaths, Hospitalizations, Date, State)
MD_Summary <- read_csv("MD_Summary.csv")
MD_Summary <- bind_rows(MD_Summary_Today, MD_Summary)
write_csv(MD_Summary, "MD_Summary.csv")
MD_Summary
casesByAgeAndSex <- casesByAgeAndSex[[1]]
MD_By_Sex_Today <- casesByAgeAndSex[10,1]
MD_By_Sex_Today
MD_By_Sex_Today %>%
str_split(", ") %>%
lapply(str_remove_all, ",") %>%
unlist() %>%
str_split(": ") %>%
as_tibble(.name_repair = "universal")
MD_By_Sex_Today
MD_By_Sex_Today %>%
str_split(": ")
MD_By_Sex_Today %>%
str_split(": ") %>%
lapply(str_remove_all, ",")
MD_By_Sex_Today %>%
str_split(": ") %>%
lapply(str_remove_all, ",") %>%
unlist() %>%
as_tibble(.name_repair = "universal")
MD_By_Sex_Today %>%
str_split(": ") %>%
lapply(str_remove_all, ",")
MD_By_Sex_Today %>%
str_split(": ") %>%
lapply(str_remove_all, ",") %>%
#unlist() %>%
as_tibble(.name_repair = "universal")
MD_By_Sex_Today
MD_By_Sex_Today %>%
str_remove_all(",")
MD_By_Sex_Today %>%
str_remove_all(",") %>%
str_split(": ")
MD_By_Sex_Today %>%
str_remove_all(",") %>%
str_split(": ") %>%
#unlist() %>%
as_tibble(.name_repair = "universal")
MD_By_Sex_Today %>%
str_remove_all(",") %>%
str_split(": ") %>%
unlist() %>%
as_tibble(.name_repair = "universal")
MD_By_Sex_Today %>%
str_remove_all(",") %>%
str_split(": ")
MD_By_Sex_Today
MD_By_Sex_Today %>%
str_remove_all(",") %>%
str_split("\\s+")
MD_By_Sex_Today %>%
str_remove_all(",") %>%
str_split("\\s+")
lapply(str_remove_all, ":")
MD_By_Sex_Today %>%
str_remove_all(",") %>%
str_split("\\s+") %>%
lapply(str_remove_all, ":")
MD_By_Sex_Today %>%
str_remove_all(",") %>%
str_split("\\s+") %>%
lapply(str_remove_all, ":") %>%
#unlist() %>%
as_tibble(.name_repair = "universal")
MD_By_Sex_Today %>%
str_remove_all(",") %>%
str_split("\\s+") %>%
lapply(str_remove_all, ":") %>%
unlist() %>%
as_tibble(.name_repair = "universal")
MD_By_Sex_Today %>%
str_remove_all(",") %>%
str_split("\\s+") %>%
lapply(str_remove_all, ":")
MD_By_Sex <- read_csv("MD_By_Sex.csv")
MD_By_Sex
MD_By_Sex_Today
MD_By_Sex_Today
MD_By_Sex_Today %>%
str_remove_all("[,:]")
MD_By_Sex_Today %>%
str_remove_all("[,:]") %>%
str_split("\\s+")
MD_By_Sex_Today[[1]][2]
MD_By_Sex_Today[[1]]
MD_By_Sex_Today %>%
str_remove_all("[,:]") %>%
str_split("\\s+") -> test
test[[1]][2]
?tibble
test[[1]]
test[[1]][4]
tibble(Female = test[[1]][2], Male = test[[1]][4])
tibble(Female = as.integer(test[[1]][2]), Male = as.integer(test[[1]][4]))
MD_By_Sex
test
c(test[[1]][1], test[[1]][3])
c(test[[1]][2], test[[1]][4])
as.integer(c(test[[1]][2], test[[1]][4]))
rep(Sys.Date(), 2)
as.Date(rep(Sys.Date(), 2))
rep("Maryland", 2)
tibble(Sex = c(test[[1]][1], test[[1]][3]),
Cases = as.integer(c(test[[1]][2], test[[1]][4])),
Date = as.Date(rep(Sys.Date(), 2)),
State = rep("Maryland", 2))
MD_By_Sex_Today
test
MD_By_Sex_Today %>%
str_remove_all("[,:]") %>%
str_split("\\s")
MD_By_Sex_Today %>%
str_remove_all("[,:]")
MD_By_Sex_Today %>%
str_remove_all("[,:]") %>%
str_split("\\s+")
MD_By_Sex_Today <- MD_By_Sex_Today %>%
str_remove_all("[,:]") %>%
str_split("\\s+")
tibble(Sex = c(MD_By_Sex_Today[[1]][1], MD_By_Sex_Today[[1]][3]),
Cases = as.integer(c(MD_By_Sex_Today[[1]][2], MD_By_Sex_Today[[1]][4])),
Date = as.Date(rep(Sys.Date(), 2)),
State = rep("Maryland", 2))
MD_By_Sex_Today <- tibble(Sex = c(MD_By_Sex_Today[[1]][1], MD_By_Sex_Today[[1]][3]),
Cases = as.integer(c(MD_By_Sex_Today[[1]][2], MD_By_Sex_Today[[1]][4])),
Date = as.Date(rep(Sys.Date(), 2)),
State = rep("Maryland", 2))
bind_rows(MD_By_Sex_Today, MD_By_Sex)
MD_By_Sex <- bind_rows(MD_By_Sex_Today, MD_By_Sex)
write_csv(MD_By_Sex, "MD_By_Sex.csv")
MD_By_Age_Today <- casesByAgeAndSex[1:9,]
MD_By_Age_Today
colnames(MD_By_Age_Today) <- c("Age_Range", "Cases")
MD_By_Age_Today %>%
mutate(Date = Sys.Date(), State = "Maryland", Cases = as.integer(Cases))
MD_By_Age_Today <- MD_By_Age_Today %>%
mutate(Date = Sys.Date(), State = "Maryland", Cases = as.integer(Cases))
MD_By_Age <- read_csv("MD_By_Age.csv")
MD_By_Age <- bind_rows(MD_By_Age_Today, MD_By_Age)
write_csv(MD_By_Age, "MD_By_Age.csv")
Virginia_By_County_Today <- read_csv("Virginia_By_County_Today.csv", locale = locale(encoding = "UTF-8"))
Virginia_By_County_Today <- Virginia_By_County_Today %>%
rename(County = Locality, Date = `Report Date`, Cases = `Total Cases`) %>%
mutate(State = "Virginia") %>%
mutate(Date = mdy(Date)) %>%
left_join(stateConversions, by = c("State" = "Full_Name")) %>%
dplyr::select(County, Cases, Date, State, Abbr, FIPS)
Virginia_By_County <- read_csv("Virginia_By_County.csv")
bind_rows(Virginia_By_County_Today, Virginia_By_County)
Virginia_By_County <- bind_rows(Virginia_By_County_Today, Virginia_By_County)
write_csv(Virginia_By_County, "Virginia_By_County.csv")
Virginia_By_Age_Today <- read_csv("Virginia_By_Age_Today.csv")
Virginia_By_Age_Today <- Virginia_By_Age_Today %>%
mutate(Date = `Report Date`, Age_Range = `Age Group`, Cases = `Number of Cases`, State = "Virginia") %>%
mutate(Date = mdy(Date)) %>%
select(Age_Range, Cases, Date, State)
Virginia_By_Age_Today
Virginia_By_Age <- read_csv("Virginia_By_Age.csv")
bind_rows(Virginia_By_Age_Today, Virginia_By_Age)
Virginia_By_Age <- bind_rows(Virginia_By_Age_Today, Virginia_By_Age)
write_csv(Virginia_By_Age, "Virginia_By_Age.csv")
Virginia_By_Sex_Today <- read_csv("Virginia_By_Sex_Today.csv")
Virginia_By_Sex_Today <- Virginia_By_Sex_Today %>%
mutate(Date = `Report Date`, Cases = `Number of Cases`, State = "Virginia") %>%
mutate(Date = mdy(Date)) %>%
select(Sex, Cases, Date, State)
Virginia_By_Sex_Today
Virginia_By_Sex <- read_csv("Virginia_By_Sex.csv")
bind_rows(Virginia_By_Sex_Today, Virginia_By_Sex)
Virginia_By_Sex <- bind_rows(Virginia_By_Sex_Today, Virginia_By_Sex)
write_csv(Virginia_By_Sex, "Virginia_By_Sex.csv")
Virginia_By_Race_Today <- read_csv("Virginia_By_Race_Today.csv")
Virginia_By_Race_Today <- Virginia_By_Race_Today %>%
mutate(Date = `Report Date`, Cases = `Number of Cases`, State = "Virginia") %>%
mutate(Date = mdy(Date)) %>%
select(Race, Cases, Date, State)
Virginia_By_Race_Today
Virginia_By_Race <- read_csv("Virginia_By_Race.csv")
bind_rows(Virginia_By_Race_Today, Virginia_By_Race)
Virginia_By_Race <- bind_rows(Virginia_By_Race_Today, Virginia_By_Race)
write_csv(Virginia_By_Race, "Virginia_By_Race.csv")
Virginia_Totals_Numbers <- pdf_text(paste0(paste("Virginia", "COVID-19", "Dashboard", Sys.Date(), sep = " "), ".pdf")) %>%
str_remove_all("\n") %>%
str_remove_all(",") %>%
str_remove_all("(\\s{1,})") %>%
str_extract_all("\\d+") %>%
unlist()
Virginia_Totals_Headers <- pdf_text(paste0(paste("Virginia", "COVID-19", "Dashboard", Sys.Date(), sep = " "), ".pdf")) %>%
str_remove_all("\n") %>%
str_remove_all(",") %>%
str_remove_all("(\\s{1,})") %>%
str_remove_all("Total") %>%
str_extract_all("[[:alpha:]]+") %>%
unlist()
Virginia_Totals_Numbers
Virginia_Totals_Headers
Virginia_Totals_Headers[1] <- "Tests"
Virginia_Totals <- as.data.frame(rbind(Virginia_Totals_Headers, Virginia_Totals_Numbers), row.names = F, stringsAsFactors = F)
Virginia_Totals <- Virginia_Totals[2,]
colnames(Virginia_Totals) <- Virginia_Totals_Headers
Virginia_Totals$Date <- Sys.Date()
Virginia_Totals$Tests <- as.integer(Virginia_Totals$Tests)
Virginia_Totals$Hospitalizations <- as.integer(Virginia_Totals$Hospitalizations)
Virginia_Totals$Deaths <- as.integer(Virginia_Totals$Deaths)
Virginia_Totals$State <- "Virginia"
Virginia_Totals_Today <- Virginia_Totals
Virginia_Totals_Today
Virginia_Totals <- read_csv("VirginiaTotals.csv")
Virginia_Totals <- bind_rows(Virginia_Totals_Today, Virginia_Totals)
write_csv(Virginia_Totals, "VirginiaTotals.csv")
