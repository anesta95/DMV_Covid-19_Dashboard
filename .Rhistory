),
visible = T) %>%
add_trace(y = ~Case_Rate_100K,
linetype = ~factor(State),
color = ~factor(County),
colors = pals::glasbey(),
mode = "lines+markers",
type = "scatter",
symbol = ~State,
hovertemplate = paste(
"State: ", dmvCasesByCountyLinePlotly$State,
"<br>County: ", dmvCasesByCountyLinePlotly$County,
"<br>Cases: ", "%{y}",
"<br>Date: ", "%{x}",
"<extra></extra>"
),
visible = F) %>%
layout(yaxis = list(type = "log"),
#title = "DMV Covid-19 Cases & Case Rate by County",
xaxis = list(title = ""),
showlegend = F,
updatemenus = list(
list(active = 0,
buttons = list(
list(method = "restyle",
args = list("visible", append(rep(list(TRUE), 15), rep(list(FALSE), 15))),
label = "Count"),
list(method = "restyle",
args = list("visible", append(rep(list(FALSE), 15), rep(list(TRUE), 15))),
label = "Per 100K")))
))
Sys.sleep(15)
dmvCasesByCountyBarPerCapPlotly <- DMV_Counties_Covid_Cases %>%
left_join(stateCountyPops, by = "FIPS") %>%
filter(Date == max(Date)) %>%
filter(FIPS %in% DMV_Closer_FIPS) %>%
mutate(Case_Rate_100K = (Cases / TOTAL_POP_100K))
dmvCasesByCountyBarPlotlyGraph <- plot_ly(dmvCasesByCountyBarPerCapPlotly,
x = ~factor(State),
type = "bar",
color = ~factor(reorder(County, -Cases)),
colors = pals::glasbey()) %>%
add_trace(y = ~Cases,
hovertemplate = paste(
"State: ", dmvCasesByCountyBarPerCapPlotly$State,
"<br>County: ", dmvCasesByCountyBarPerCapPlotly$County,
"<br>Cases: ", "%{y}",
"<br>Date: ", dmvCasesByCountyBarPerCapPlotly$Date,
"<extra></extra>"
),
visible = T) %>%
add_trace(y = ~Case_Rate_100K,
hovertemplate = paste(
"State: ", dmvCasesByCountyBarPerCapPlotly$State,
"<br>County: ", dmvCasesByCountyBarPerCapPlotly$County,
"<br>Cases: ", "%{y}",
"<br>Date: ", dmvCasesByCountyBarPerCapPlotly$Date,
"<extra></extra>"
),
visible = F) %>%
layout(#title = paste("DMV Covid-19 Cases & Case Rate by County on", Sys.Date() - 1, sep = " "),
xaxis = list(title = ""),
showlegend = F,
updatemenus = list(
list(active = 0,
buttons = list(
list(method = "restyle",
args = list("visible", append(rep(list(F), 15), rep(list(T), 15))),
label = "Count"),
list(method = "restyle",
args = list("visible", append(rep(list(T), 15), rep(list(F), 15))),
label = "Per 100K")))
))
Sys.sleep(15)
DMVTestsLinePerCapPlotly <- dailySummary %>%
drop_na(Tests) %>%
left_join(stateCountyPops, by = c("State" = "STNAME")) %>%
filter(SUMLEV == "040") %>%
mutate(Test_Rate_100K = (Tests / TOTAL_POP_100K))
dmvTestsByStateLinePlotlyGraph <- plot_ly(data = DMVTestsLinePerCapPlotly, x = ~Date) %>%
add_trace(y = ~Tests,
linetype = ~factor(State),
color = ~factor(State),
colors = c("#E91436", "#ebab00ff", "#00257C"),
mode = "lines+markers",
type = "scatter",
symbol = ~State,
hovertemplate = paste(
"State: ", DMVTestsLinePerCapPlotly$State,
"<br>Tests: ", "%{y}",
"<br>Date: ", "%{x}",
"<extra></extra>"
),
visible = T) %>%
add_trace(y = ~Test_Rate_100K,
linetype = ~factor(State),
color = ~factor(State),
colors = c("#E91436", "#ebab00ff", "#00257C"),
mode = "lines+markers",
type = "scatter",
symbol = ~State,
hovertemplate = paste(
"State: ", DMVTestsLinePerCapPlotly$State,
"<br>Tests: ", "%{y}",
"<br>Date: ", "%{x}",
"<extra></extra>"
),
visible = F) %>%
layout(#title = "DMV Covid-19 Tests & Test Rate by State",
xaxis = list(title = ""),
showlegend = F,
updatemenus = list(
list(active = 0,
buttons = list(
list(method = "restyle",
args = list("visible", append(rep(list(TRUE), 3), rep(list(FALSE), 3))),
label = "Count"),
list(method = "restyle",
args = list("visible", append(rep(list(FALSE), 3), rep(list(TRUE), 3))),
label = "Per 100K")))
))
Sys.sleep(15)
DMVTestsBarPerCapPlotly <- dailySummary %>%
drop_na(Tests) %>%
filter(Date == max(Date)) %>%
left_join(stateCountyPops, by = c("State" = "STNAME")) %>%
filter(SUMLEV == "040") %>%
mutate(Test_Rate_100K = (Tests / TOTAL_POP_100K))
dmvTestsByStateBarPlotlyGraph <- plot_ly(DMVTestsBarPerCapPlotly,
x = ~factor(State),
type = "bar",
color = ~factor(State),
colors = c("#E91436", "#ebab00ff", "#00257C")) %>%
add_trace(y = ~Tests,
hovertemplate = paste(
"State: ", DMVTestsBarPerCapPlotly$State,
"<br>Tests: ", "%{y}",
"<br>Date: ", DMVTestsBarPerCapPlotly$Date,
"<extra></extra>"
),
visible = T) %>%
add_trace(y = ~Test_Rate_100K,
hovertemplate = paste(
"State: ", DMVTestsBarPerCapPlotly$State,
"<br>Cases: ", "%{y}",
"<br>Date: ", DMVTestsBarPerCapPlotly$Date,
"<extra></extra>"
),
visible = F) %>%
layout(#title = paste("DMV Covid-19 Tests & Test Rate by State on", Sys.Date() - 1, sep = " "),
xaxis = list(title = ""),
showlegend = F,
updatemenus = list(
list(active = 0,
buttons = list(
list(method = "restyle",
args = list("visible", append(rep(list(F), 3), rep(list(T), 3))),
label = "Count"),
list(method = "restyle",
args = list("visible", append(rep(list(T), 3), rep(list(F), 3))),
label = "Per 100K")))
))
Sys.sleep(15)
dcmdvaDeathsLinePlotly <- DMV_Counties_Covid_Cases %>%
left_join(stateCountyPops, by = "FIPS") %>%
filter(Date >= as.Date("2020-04-02")) %>%
filter(FIPS %in% DMV_Closer_FIPS) %>%
mutate(Death_Rate_100K = (Deaths / TOTAL_POP_100K))
dmvDeathsByCountyLinePlotlyGraph <- plot_ly(data = dcmdvaDeathsLinePlotly, x = ~Date) %>%
add_trace(y = ~Deaths,
linetype = ~factor(State),
color = ~factor(County),
colors = pals::glasbey(),
mode = "lines+markers",
type = "scatter",
symbol = ~State,
hovertemplate = paste(
"State: ", dcmdvaDeathsLinePlotly$State,
"<br>County: ", dcmdvaDeathsLinePlotly$County,
"<br>Deaths: ", "%{y}",
"<br>Date: ", "%{x}",
"<extra></extra>"
),
visible = T) %>%
add_trace(y = ~Death_Rate_100K,
linetype = ~factor(State),
color = ~factor(County),
colors = pals::glasbey(),
mode = "lines+markers",
type = "scatter",
symbol = ~State,
hovertemplate = paste(
"State: ", dcmdvaDeathsLinePlotly$State,
"<br>County: ", dcmdvaDeathsLinePlotly$County,
"<br>Deaths: ", "%{y}",
"<br>Date: ", "%{x}",
"<extra></extra>"
),
visible = F) %>%
layout(yaxis = list(type = "log"),
#title = "DMV Covid-19 Cases & Case Rate by County",
xaxis = list(title = ""),
showlegend = F,
updatemenus = list(
list(active = 0,
buttons = list(
list(method = "restyle",
args = list("visible", append(rep(list(TRUE), 15), rep(list(FALSE), 15))),
label = "Count"),
list(method = "restyle",
args = list("visible", append(rep(list(FALSE), 15), rep(list(TRUE), 15))),
label = "Per 100K")))
))
Sys.sleep(15)
# dmvDeathsByStateLinePlotlyGraph <- plot_ly(data = dcmdvaDeathsLinePlotly, x = ~Date) %>%
#   add_trace(y = ~Deaths,
#             linetype = ~factor(State),
#             color = ~factor(State),
#             colors = c("#E91436", "#ebab00ff", "#00257C"),
#             mode = "lines+markers",
#             type = "scatter",
#             symbol = ~State,
#             hovertemplate = paste(
#               "State: ", dcmdvaDeathsLinePlotly$State,
#               "<br>Deaths: ", "%{y}",
#               "<br>Date: ", "%{x}",
#               "<extra></extra>"
#             ),
#             visible = T) %>%
#   add_trace(y = ~Death_Rate_100K,
#             linetype = ~factor(State),
#             color = ~factor(State),
#             colors = c("#E91436", "#ebab00ff", "#00257C"),
#             mode = "lines+markers",
#             type = "scatter",
#             symbol = ~State,
#             hovertemplate = paste(
#               "State: ", dcmdvaDeathsLinePlotly$State,
#               "<br>Deaths: ", "%{y}",
#               "<br>Date: ", "%{x}",
#               "<extra></extra>"
#             ),
#             visible = F) %>%
#   layout(#title = "DMV Covid-19 Deaths & Death Rate by State",
#          showlegend = F,
#          xaxis = list(title = ""),
#          updatemenus = list(
#            list(active = 0,
#                 buttons = list(
#                   list(method = "restyle",
#                        args = list("visible", append(rep(list(TRUE), 3), rep(list(FALSE), 3))),
#                        label = "Count"),
#                   list(method = "restyle",
#                        args = list("visible", append(rep(list(FALSE), 3), rep(list(TRUE), 3))),
#                        label = "Per 100K")))
#          ))
dmvDeathsByCountyBarPerCapPlotly <- DMV_Counties_Covid_Cases %>%
left_join(stateCountyPops, by = "FIPS") %>%
filter(Date == max(Date)) %>%
filter(FIPS %in% DMV_Closer_FIPS) %>%
mutate(Death_Rate_100K = (Deaths / TOTAL_POP_100K))
dmvDeathsByCountyBarPlotlyGraph <- plot_ly(dmvDeathsByCountyBarPerCapPlotly,
x = ~factor(State),
type = "bar",
color = ~factor(reorder(County, -Deaths)),
colors = pals::glasbey()) %>%
add_trace(y = ~Death_Rate_100K,
hovertemplate = paste(
"State: ", dmvDeathsByCountyBarPerCapPlotly$State,
"<br>County: ", dmvDeathsByCountyBarPerCapPlotly$County,
"<br>Deaths: ", "%{y}",
"<br>Date: ", dmvDeathsByCountyBarPerCapPlotly$Date,
"<extra></extra>"
),
visible = F) %>%
add_trace(y = ~Deaths,
hovertemplate = paste(
"State: ", dmvDeathsByCountyBarPerCapPlotly$State,
"<br>County: ", dmvDeathsByCountyBarPerCapPlotly$County,
"<br>Deaths: ", "%{y}",
"<br>Date: ", dmvDeathsByCountyBarPerCapPlotly$Date,
"<extra></extra>"
),
visible = T) %>%
layout(#title = paste("DMV Covid-19 Cases & Case Rate by County on", Sys.Date() - 1, sep = " "),
yaxis = list(title = "Deaths"),
xaxis = list(title = ""),
showlegend = F,
updatemenus = list(
list(active = 0,
buttons = list(
list(method = "restyle",
args = list("visible", append(rep(list(T), 15), rep(list(F), 15))),
label = "Count"),
list(method = "restyle",
args = list("visible", append(rep(list(F), 15), rep(list(T), 15))),
label = "Per 100K")))
))
# dcmdvaDeathsBarPlotly <- dailySummary %>%
#   drop_na(State) %>%
#   filter(Date == max(Date)) %>%
#   left_join(stateCountyPops, by = c("State" = "STNAME")) %>%
#   filter(SUMLEV == "040") %>%
#   mutate(Death_Rate_100K = as.double((Deaths / TOTAL_POP_100K)), Deaths = as.double(Deaths))
#
#
# dmvDeathsByStateBarPlotlyGraph <- plot_ly(dcmdvaDeathsBarPlotly,
#         x = ~factor(State),
#         type = "bar",
#         color = ~factor(State),
#         colors = c("#E91436", "#ebab00ff", "#00257C")) %>%
#   add_trace(y = ~Death_Rate_100K,
#             hovertemplate = paste(
#               "State: ", dcmdvaDeathsBarPlotly$State,
#               "<br>Deaths: ", "%{y}",
#               "<br>Date: ", dcmdvaDeathsBarPlotly$Date,
#               "<extra></extra>"
#             ),
#             visible = F) %>%
#     add_trace(y = ~Deaths,
#             hovertemplate = paste(
#               "State: ", dcmdvaDeathsBarPlotly$State,
#               "<br>Deaths: ", "%{y}",
#               "<br>Date: ", dcmdvaDeathsBarPlotly$Date,
#               "<extra></extra>"
#             ),
#             visible = T) %>%
#   layout(#title = paste("DMV Covid-19 Deaths & Death Rate by State on", Sys.Date() - 1, sep = " "),
#          xaxis = list(title = ""),
#          yaxis = list(title = "Deaths"),
#          showlegend = F,
#          updatemenus = list(
#            list(active = 0,
#                 buttons = list(
#                   list(method = "restyle",
#                        args = list("visible", append(rep(list(T), 3), rep(list(F), 3))),
#                        label = "Count"),
#                   list(method = "restyle",
#                        args = list("visible", append(rep(list(F), 3), rep(list(T), 3))),
#                        label = "Per 100K")))
#          ))
Sys.sleep(15)
#### DC Hospital Data ####
dcCovid19Hospitals <- dcCovid19Hospitals %>%
filter(Resource %in% c("ICU beds available", "Ventilators free"))
dcCovidHospitalLinePlotlyGraph <- plot_ly(data = dcCovid19Hospitals, x = ~Date) %>%
add_trace(y = ~Units,
color = ~factor(Resource),
colors = pals::glasbey(),
mode = "lines+markers",
type = "scatter",
hovertemplate = paste(
"Resource: ", dcCovid19Hospitals$Resource,
"<br>Units: ", "%{y}",
"<br>Date: ", "%{x}",
"<extra></extra>"
),
visible = T) %>%
layout(xaxis = list(
type = 'date',
tickformat = "%d %B",
title = ""
),
showlegend = T)
plotlyPlots <- list(dmvDeathsByCountyBarPlotlyGraph,
dmvDeathsByCountyLinePlotlyGraph,
dmvTestsByStateBarPlotlyGraph,
dmvTestsByStateLinePlotlyGraph,
dmvCasesByCountyBarPlotlyGraph,
dmvCasesByCountyLinePlotlyGraph,
dcCovidHospitalLinePlotlyGraph)
Sys.sleep(5)
plotlyPlots <- map(plotlyPlots, partial_bundle)
widget_file_size <- function(p) {
d <- tempdir()
withr::with_dir(d, htmlwidgets::saveWidget(p, "index.html"))
f <- file.path(d, "index.html")
mb <- round(file.info(f)$size / 1e6, 3)
message("File is: ", mb," MB")
}
Sys.sleep(5)
walk(plotlyPlots, widget_file_size)
Sys.sleep(5)
plotlyFileNames <- list("dmvDeathsByCountyBarPlotlyGraph.html",
"dmvDeathsByCountyLinePlotlyGraph.html",
"dmvTestsByStateBarPlotlyGraph.html",
"dmvTestsByStateLinePlotlyGraph.html",
"dmvCasesByCountyBarPlotlyGraph.html",
"dmvCasesByCountyLinePlotlyGraph.html",
"dcCovidHospitalLinePlotlyGraph.html")
# map2(plotlyPlots, plotlyFileNames, ~{saveWidget(.x, .y, selfcontained = F, libdir = "/home/adrian/Documents/Personal_Portfolio_Site/DMV_Covid-19")})
walk2(plotlyPlots, plotlyFileNames, ~{saveWidget(.x, .y, selfcontained = F, libdir = "/home/adrian/Documents/Personal_Portfolio_Site/DMV_Covid-19")})
# saveWidget(partial_bundle(dmvDeathsByCountyBarPlotlyGraph), "dmvDeathsByCountyBarPlotlyGraph.html", selfcontained = F, libdir = "/home/adrian/Documents/Personal_Portfolio_Site/DMV_Covid-19")
# Sys.sleep(5)
# saveWidget(partial_bundle(dmvDeathsByCountyLinePlotlyGraph), "dmvDeathsByCountyLinePlotlyGraph.html", selfcontained = F, libdir = "/home/adrian/Documents/Personal_Portfolio_Site/DMV_Covid-19")
# Sys.sleep(5)
# saveWidget(partial_bundle(dmvTestsByStateBarPlotlyGraph), "dmvTestsByStateBarPlotlyGraph.html", selfcontained = F, libdir = "/home/adrian/Documents/Personal_Portfolio_Site/DMV_Covid-19")
# Sys.sleep(5)
# saveWidget(partial_bundle(dmvTestsByStateLinePlotlyGraph), "dmvTestsByStateLinePlotlyGraph.html", selfcontained = F, libdir = "/home/adrian/Documents/Personal_Portfolio_Site/DMV_Covid-19")
# Sys.sleep(5)
# saveWidget(partial_bundle(dmvCasesByCountyBarPlotlyGraph), "dmvCasesByCountyBarPlotlyGraph.html", selfcontained = F, libdir = "/home/adrian/Documents/Personal_Portfolio_Site/DMV_Covid-19")
# Sys.sleep(5)
# saveWidget(partial_bundle(dmvCasesByCountyLinePlotlyGraph), "dmvCasesByCountyLinePlotlyGraph.html", selfcontained = F, libdir = "/home/adrian/Documents/Personal_Portfolio_Site/DMV_Covid-19")
# Sys.sleep(5)
# saveWidget(partial_bundle(dcCovidHospitalLinePlotlyGraph), "dcCovidHospitalLinePlotlyGraph.html", selfcontained = F, libdir = "/home/adrian/Documents/Personal_Portfolio_Site/DMV_Covid-19")
system("rm VDH-COVID-19*.csv")
Sys.sleep(10)
system("wget --wait=2 --no-check-certificate -i VDH_URLs.txt")
Sys.sleep(10)
setwd("/home/adrian/Documents/DCist_Covid-19_Analysis")
system("rm VDH-COVID-19*.csv")
Sys.sleep(10)
system("wget --wait=2 --no-check-certificate -i VDH_URLs.txt")
Sys.sleep(10)
Virginia_By_County_Raw <- read_csv("VDH-COVID-19-PublicUseDataset-Cases.csv")
Virginia_DeathsHospitalizations_Today <- read_csv("VDH-COVID-19-PublicUseDataset-Cases_By-District-Death-Hospitalization.csv")
Virginia_DeathsHospitalizations_Today <- Virginia_DeathsHospitalizations_Today %>%
rename(Date = `Report Date`, County = `Health District`, Cases = `Number of Cases`, Hospitalizations = `Number of Hospitalizations`, Deaths = `Number of Deaths`) %>%
mutate(Date = Sys.Date() - 1, State = "Virginia")
Virginia_DeathsHospitalizations <- read_csv("Virginia_DeathsHospitalizations.csv")
Virginia_DeathsHospitalizations <- bind_rows(Virginia_DeathsHospitalizations_Today, Virginia_DeathsHospitalizations)
Virginia_DeathsHospitalizations
write_csv(Virginia_DeathsHospitalizations, "Virginia_DeathsHospitalizations.csv")
Virginia_By_County_Raw %>%
rename(County = Locality, Date = `Report Date`, Cases = `Total Cases`) %>%
mutate(State = "Virginia", Date = mdy(Date) - 1) %>%
left_join(stateConversions, by = c("State" = "Full_Name")) %>%
#left_join(select(Virginia_DeathsHospitalizations_Today, County, Hospitalizations, Deaths), by = c("County")) %>%
dplyr::select(County, Cases, Hospitalizations, Deaths, Date, State, Abbr, FIPS) %>%
filter(Date == max(Date)) %>%
arrange(desc(Date))
Virginia_By_County_Raw
Virginia_By_County_Raw
Virginia_By_County_Raw %>%
rename(County = Locality, Date = `Report Date`, Cases = `Total Cases`) %>%
mutate(State = "Virginia", Date = mdy(Date) - 1) %>%
left_join(stateConversions, by = c("State" = "Full_Name")) %>%
#left_join(select(Virginia_DeathsHospitalizations_Today, County, Hospitalizations, Deaths), by = c("County")) %>%
dplyr::select(County, Cases, Hospitalizations, Deaths, Date, State, Abbr, FIPS) %>%
filter(Date == max(Date)) %>%
arrange(desc(Date))
library(httr)
library(jsonlite)
library(sp)
library(sf)
library(tmap)
library(stringr)
dcMovingViolationsURLs <- c("https://opendata.arcgis.com/datasets/186e3b6cf45f44b1ac0fe750518e3cab_3.geojson",
"https://opendata.arcgis.com/datasets/6ceb38b8e24a464a94434c7d39934ebd_2.geojson",
"https://opendata.arcgis.com/datasets/c3e91eed970149e6a41853ddadf36394_1.geojson",
"https://opendata.arcgis.com/datasets/878e5e25b4fe47bbbbd3a37c77285a63_3.geojson",
"https://opendata.arcgis.com/datasets/0e38e123d4414d37905d0bd64af456ad_2.geojson",
"https://opendata.arcgis.com/datasets/a03b8a80a06e4451951497dee78959ab_1.geojson")
dcMovingViolationsDFNames <- c("april2020MovingViolations",
"march2020MovingViolations",
"february2020MovingViolations",
"april2019MovingViolations",
"march2019MovingViolations",
"february2019MovingViolations")
getMovingViolations <- function(url) {
Sys.sleep(5)
server_response <- GET(url = url, user_agent("Adrian Nesta adriannesta@gmail.com This is for a blog post on Covid-19 impacts on MPD moving violations"))
if (http_error(server_response)) {
stop("The request to Open Data DC has failed")
}
Sys.sleep(5)
data <- fromJSON(content(server_response, as = "text", encoding = "UTF-8"))
return(data)
}
for (i in seq_along(dcMovingViolationsDFNames)) {
assign(dcMovingViolationsDFNames[i], getMovingViolations(dcMovingViolationsURLs[i])$features$properties)
}
class(april2020MovingViolations)
names(april2020MovingViolations)
as_tibble(april2020MovingViolations) %>%
filter(is.na(LATITUDE) & is.na(LONGITUDE))
View(april2020MovingViolations)
for (i in seq_along(dcMovingViolationsDFNames)) {
assign(dcMovingViolationsDFNames[i], as_tibble(getMovingViolations(dcMovingViolationsURLs[i])$features$properties))
}
april2020MovingViolations %>%
filter(is.na(LATITUDE) & is.na(LONGITUDE))
april2020MovingViolations %>%
filter(is.na(LATITUDE) & is.na(LONGITUDE)) %>%
mutate(cleanedAddress = str_to_title(paste(str_extract(LOCATION, "\\d{3,}\\s\\w+\\s\\w+"), "Washington, DC")))
april2020MovingViolations %>%
filter(is.na(LATITUDE) & is.na(LONGITUDE)) %>%
mutate(cleanedAddress = str_to_title(paste(str_extract(LOCATION, "\\d{3,}\\s\\w+\\s\\w+"), "Washington, DC"))) -> test
View(test)
april2020MovingViolations %>%
filter(is.na(LATITUDE) & is.na(LONGITUDE)) %>%
mutate(cleanedAddress = paste(str_to_title(str_extract(LOCATION, "\\d{3,}\\s\\w+\\s\\w+")), "Washington, DC")) -> test
View(test)
table(test$cleanedAddress)
library(ggmap)
install.packages(c("ggmap", "tidygeocoder"))
library(tidygeocoder)
geo_cascade(test$cleanedAddress)
geo_cascade(test$cleanedAddress[1])
test$cleanedAddress[1]
geo_cascade(test$cleanedAddress[1], verbose = F)
geo_cascade(test$cleanedAddress[1])[,1]
geo_cascade(test$cleanedAddress[1], verbose = F)[,1]
unname(geo_cascade(test$cleanedAddress[1])[,1])
april2020MovingViolations %>%
mutate(cleanedAddress = paste(str_to_title(str_extract(LOCATION, "\\d{3,}\\s\\w+\\s\\w+")), "Washington, DC")) %>%
mutate(fullLat = case_when(is.na(LATITUDE) ~ unname(geo_cascade(cleanedAddress)[,1]),
T ~ LATITUDE))
map_dbl(test$cleanedAddress, uname(geo_cascade)[,1])
map_dbl(test$cleanedAddress, unname(geo_cascade)[,1])
map_dbl(test$cleanedAddress, unname(geo_cascade))
map_df(test$cleanedAddress, unname(geo_cascade))
