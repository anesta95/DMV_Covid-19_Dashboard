filter(!is.na(Units)) %>%
arrange(desc(Date))
dcCovid19Hospitals
write_csv(dcCovid19Hospitals, "dcCovid19Hospitals.csv")
library(rvest)
library(htmltools)
library(htmlwidgets)
library(RColorBrewer)
library(xml2)
library(curl)
library(httr)
library(splashr)
library(stevedore)
library(rlist)
library(lubridate)
library(RSelenium)
library(wdman)
library(devtools)
library(pdftools)
library(sf)
library(raster)
library(sp)
library(rgdal)
library(leaflet)
library(plotly)
library(mapview)
library(readxl)
library(scales)
library(tidyverse)
setwd("/home/adrian/Documents/DCist_Covid-19_Analysis")
# Import and make conversion tables first
stateConversions <- tibble(Full_Name = state.name, Abbr = state.abb)
stateConversions <- bind_rows(stateConversions, tibble(Full_Name = "District of Columbia", Abbr = "DC")) %>%
arrange(Full_Name)
countyStateFIPS <- read_csv("countyFIPSCodes2019.csv")
countyStateFIPS <- bind_rows(countyStateFIPS, tibble(FIPS = 11001, Name = "District of Columbia", State = "DC"))
stateCountyPops <- read_csv("/home/adrian/Documents/US_County_Shapfile_Population/co-est2019-alldata.csv", col_types = cols_only(SUMLEV = "c", STATE = "c", COUNTY = "c", STNAME = "c", CTYNAME = "c", POPESTIMATE2019 = "n"))
stateCountyPops <- stateCountyPops %>%
mutate(FIPS = str_c(STATE, COUNTY), TOTAL_POP = POPESTIMATE2019, TOTAL_POP_100K = POPESTIMATE2019 / 100000)
# Make the character vectors of the county names and FIPS codes
DMV_Counties <- c("District of Columbia",
"Calvert", "Charles", "Frederick", "Montgomery", "Prince Georges",
"Alexandria", "Arlington", "Clarke", "Culpeper", "Fairfax", "Farquier", "Fredericksburg", "Loudoun", "Manassas", "Prince William", "Rappahannock", "Spotsylvania", "Stafford", "Warren",
"Jefferson")
DMV_FIPS <- c("11001", "24009", "24017", "24021", "24031", "24033", "51510", "51013", "51043", "51047", "51059", "51061", "51630", "51107", "51683", "51153", "51157", "51177", "51179", "51187", "54037", "51600", "51610", "51685")
DMV_Closer_FIPS <- c("24031", "24033", "24021", "24009", "51510", "51013", "51059", "51600", "51107", "51153", "51047", "11001", "51610", "51683", "51685")
#### This is the data webscraping done for DC, VA, MD, and WV that should be done THE DAY AFTER DATA DESIRED
#### All dashboards/datasites seem to update at around 10am so start just after then.
###### First the webscraping #####
### West Virginia Scraping
Sys.sleep(5)
system('docker pull selenium/standalone-firefox')
Sys.sleep(5)
system('docker run -t -d -p 4445:4444 --memory 1024mb --shm-size 2g selenium/standalone-firefox')
Sys.sleep(5)
# This works...but the download file is still not happening. Let's try again later?
# This link seemed helpful: https://stackoverflow.com/questions/42293193/rselenium-on-docker-where-are-files-downloaded
# fprof <- makeFirefoxProfile(list(browser.download.folderList = 2L,
#                                  browser.download.manager.showWhenStarting = FALSE,
#                                  browser.download.dir = getwd(),
#                                  browser.helperApps.neverAsk.openFile = "multipart/x-zip,application/zip,application/x-zip-compressed,application/x-compressed,application/msword,application/csv,text/csv,image/png ,image/jpeg, application/pdf, text/html,text/plain,  application/excel, application/vnd.ms-excel, application/x-excel, application/x-msexcel, application/octet-stream, application/vnd.openxmlformats-officedocument.spreadsheetml.sheet",
#                                  browser.helperApps.neverAsk.saveToDisk = "multipart/x-zip,application/zip,application/x-zip-compressed,application/x-compressed,application/msword,application/csv,text/csv,image/png ,image/jpeg, application/pdf, text/html,text/plain,  application/excel, application/vnd.ms-excel, application/x-excel, application/x-msexcel, application/octet-stream, application/vnd.openxmlformats-officedocument.spreadsheetml.sheet",
#                                  browser.helperApps.alwaysAsk.force = FALSE,
#                                  browser.download.manager.showAlertOnComplete = FALSE,
#                                  browser.download.manager.closeWhenDone = TRUE,
#                                  browser.download.manager.showWhenStarting = F
#                                  #browser.helperApps.neverAsk.saveToDisk = "text/csv/xls/xlsx"
#                                  ))
# fprof <- makeFirefoxProfile("~/.mozilla/firefox/roy2pb8o.default")
# rs <- rsDriver(browser = "firefox", port = 4445L, extraCapabilities = fprof, verbose = T, check = T)
# remDr <- rs[['client']]
remDr <- remoteDriver(remoteServerAddr = "localhost", port = 4445L, browserName = "firefox")
Sys.sleep(5)
remDr$open()
Sys.sleep(5)
# This was before they made the website dynamic :-/
# WV_URL <- "https://dhhr.wv.gov/COVID-19/Pages/default.aspx"
#
# # WV_pg <- splash("localhost") %>% render_html(WV_URL, wait = 5)
# #
# # WV_Counties %>%
# #   html_node("MSOZoneCell_WebPartWPQ1")
# # WV_Counties %>%
# #   html_nodes(xpath = '//*[@id="column"]/div/div[8]')
# #
# WV_Counties <- read_html(WV_URL) %>%
#   html_node('body') %>%
#   html_nodes('div') %>%
#   html_nodes('table')
#   html_node('#WebPartWPQ6') %>%
#   html_node('p') %>%
#   html_text()
# Get the WV by county breakout data
remDr$navigate("https://dhhr.wv.gov/COVID-19/Pages/default.aspx")
Sys.sleep(15)
# WV_powerbi <- remDr$findElement(using = 'xpath', value = '/html/body/form/div[7]/div/div[1]/div/div[2]/div/iframe')
WV_powerbi <- remDr$findElements(using = 'tag name', value = 'iframe')
WV_powerbi_first <- WV_powerbi[[1]]
Sys.sleep(5)
WV_powerbiurl <- WV_powerbi_first$getElementAttribute("src") # Doing this because the powerbi site is scrapable but the WV health one is not.
WV_powerbiurl <- unlist(WV_powerbiurl)
Sys.sleep(5)
remDr$navigate(WV_powerbiurl)
Sys.sleep(15)
All_WV_Buttons <- remDr$findElements(using = "tag name", value = "button")
Sys.sleep(5)
WV_ByCounty_Button <- All_WV_Buttons[[2]]
Sys.sleep(5)
WV_ByCounty_Button$getElementText()
Sys.sleep(5)
WV_ByCounty_Button$clickElement()
Sys.sleep(5)
WV_CountiesDiv <- remDr$findElements(using = "class", value = "tableEx")
Sys.sleep(5)
WV_Counties <- WV_CountiesDiv[[1]]$getElementText()
WV_Counties
WV_Counties <- WV_Counties %>%
unlist()
WV_Counties
WV_Counties %>% str_split("\\n") %>% unlist()
WV_Counties_Unsplit <- WV_Counties %>% str_split("\\n") %>% unlist()
WV_Headers <- make.names(str_trim(WV_Counties_Unsplit[1:3]))
WV_Headers
WV_Counties_Values <- WV_Counties_Unsplit[4:length(WV_Counties_Unsplit)]
WV_Counties_Values
WV_CountiesDiv[[1]]$getElementText()
WV_Names_Div <- remDr$findElement(using = "xpath", value = "/html/body/div[1]/ui-view/div/div[1]/div/div/div/div/exploration-container/exploration-container-legacy/div/div/exploration-host/div/div/exploration/div/explore-canvas-modern/div/div[2]/div/div[2]/div[2]/visual-container-repeat/visual-container-modern[13]/transform/div/div[3]/visual-modern/div/div/div[2]/div[1]/div[4]/div/div[2]/div[1]")
WV_Names_Div$getElementText()
WV_Cases_Div <- remDr$findElement(using = "xpath", value = "/html/body/div[1]/ui-view/div/div[1]/div/div/div/div/exploration-container/exploration-container-legacy/div/div/exploration-host/div/div/exploration/div/explore-canvas-modern/div/div[2]/div/div[2]/div[2]/visual-container-repeat/visual-container-modern[13]/transform/div/div[3]/visual-modern/div/div/div[2]/div[1]/div[4]/div/div[2]/div[2]")
WV_Cases_Div$getElementText()
Sys.sleep(5)
remDr$close()
Sys.sleep(5)
system("docker stop $(docker ps -a -q)")
system("docker rm $(docker ps -a -q)")
system("docker container prune -f")
system("docker image prune -f")
Sys.sleep(5)
library(rvest)
library(htmltools)
library(htmlwidgets)
library(RColorBrewer)
library(xml2)
library(curl)
library(httr)
library(splashr)
library(stevedore)
library(rlist)
library(lubridate)
library(RSelenium)
library(wdman)
library(devtools)
library(pdftools)
library(sf)
library(raster)
library(sp)
library(rgdal)
library(leaflet)
library(plotly)
library(mapview)
library(readxl)
library(scales)
library(tidyverse)
setwd("/home/adrian/Documents/DCist_Covid-19_Analysis")
# Import and make conversion tables first
stateConversions <- tibble(Full_Name = state.name, Abbr = state.abb)
stateConversions <- bind_rows(stateConversions, tibble(Full_Name = "District of Columbia", Abbr = "DC")) %>%
arrange(Full_Name)
countyStateFIPS <- read_csv("countyFIPSCodes2019.csv")
countyStateFIPS <- bind_rows(countyStateFIPS, tibble(FIPS = 11001, Name = "District of Columbia", State = "DC"))
stateCountyPops <- read_csv("/home/adrian/Documents/US_County_Shapfile_Population/co-est2019-alldata.csv", col_types = cols_only(SUMLEV = "c", STATE = "c", COUNTY = "c", STNAME = "c", CTYNAME = "c", POPESTIMATE2019 = "n"))
stateCountyPops <- stateCountyPops %>%
mutate(FIPS = str_c(STATE, COUNTY), TOTAL_POP = POPESTIMATE2019, TOTAL_POP_100K = POPESTIMATE2019 / 100000)
# Make the character vectors of the county names and FIPS codes
DMV_Counties <- c("District of Columbia",
"Calvert", "Charles", "Frederick", "Montgomery", "Prince Georges",
"Alexandria", "Arlington", "Clarke", "Culpeper", "Fairfax", "Farquier", "Fredericksburg", "Loudoun", "Manassas", "Prince William", "Rappahannock", "Spotsylvania", "Stafford", "Warren",
"Jefferson")
DMV_FIPS <- c("11001", "24009", "24017", "24021", "24031", "24033", "51510", "51013", "51043", "51047", "51059", "51061", "51630", "51107", "51683", "51153", "51157", "51177", "51179", "51187", "54037", "51600", "51610", "51685")
DMV_Closer_FIPS <- c("24031", "24033", "24021", "24009", "51510", "51013", "51059", "51600", "51107", "51153", "51047", "11001", "51610", "51683", "51685")
#### This is the data webscraping done for DC, VA, MD, and WV that should be done THE DAY AFTER DATA DESIRED
#### All dashboards/datasites seem to update at around 10am so start just after then.
###### First the webscraping #####
### West Virginia Scraping
Sys.sleep(5)
system('docker pull selenium/standalone-firefox')
Sys.sleep(5)
system('docker run -t -d -p 4445:4444 --memory 1024mb --shm-size 2g selenium/standalone-firefox')
Sys.sleep(5)
# This works...but the download file is still not happening. Let's try again later?
# This link seemed helpful: https://stackoverflow.com/questions/42293193/rselenium-on-docker-where-are-files-downloaded
# fprof <- makeFirefoxProfile(list(browser.download.folderList = 2L,
#                                  browser.download.manager.showWhenStarting = FALSE,
#                                  browser.download.dir = getwd(),
#                                  browser.helperApps.neverAsk.openFile = "multipart/x-zip,application/zip,application/x-zip-compressed,application/x-compressed,application/msword,application/csv,text/csv,image/png ,image/jpeg, application/pdf, text/html,text/plain,  application/excel, application/vnd.ms-excel, application/x-excel, application/x-msexcel, application/octet-stream, application/vnd.openxmlformats-officedocument.spreadsheetml.sheet",
#                                  browser.helperApps.neverAsk.saveToDisk = "multipart/x-zip,application/zip,application/x-zip-compressed,application/x-compressed,application/msword,application/csv,text/csv,image/png ,image/jpeg, application/pdf, text/html,text/plain,  application/excel, application/vnd.ms-excel, application/x-excel, application/x-msexcel, application/octet-stream, application/vnd.openxmlformats-officedocument.spreadsheetml.sheet",
#                                  browser.helperApps.alwaysAsk.force = FALSE,
#                                  browser.download.manager.showAlertOnComplete = FALSE,
#                                  browser.download.manager.closeWhenDone = TRUE,
#                                  browser.download.manager.showWhenStarting = F
#                                  #browser.helperApps.neverAsk.saveToDisk = "text/csv/xls/xlsx"
#                                  ))
# fprof <- makeFirefoxProfile("~/.mozilla/firefox/roy2pb8o.default")
# rs <- rsDriver(browser = "firefox", port = 4445L, extraCapabilities = fprof, verbose = T, check = T)
# remDr <- rs[['client']]
remDr <- remoteDriver(remoteServerAddr = "localhost", port = 4445L, browserName = "firefox")
Sys.sleep(5)
remDr$open()
Sys.sleep(5)
# This was before they made the website dynamic :-/
# WV_URL <- "https://dhhr.wv.gov/COVID-19/Pages/default.aspx"
#
# # WV_pg <- splash("localhost") %>% render_html(WV_URL, wait = 5)
# #
# # WV_Counties %>%
# #   html_node("MSOZoneCell_WebPartWPQ1")
# # WV_Counties %>%
# #   html_nodes(xpath = '//*[@id="column"]/div/div[8]')
# #
# WV_Counties <- read_html(WV_URL) %>%
#   html_node('body') %>%
#   html_nodes('div') %>%
#   html_nodes('table')
#   html_node('#WebPartWPQ6') %>%
#   html_node('p') %>%
#   html_text()
# Get the WV by county breakout data
remDr$navigate("https://dhhr.wv.gov/COVID-19/Pages/default.aspx")
Sys.sleep(15)
# WV_powerbi <- remDr$findElement(using = 'xpath', value = '/html/body/form/div[7]/div/div[1]/div/div[2]/div/iframe')
WV_powerbi <- remDr$findElements(using = 'tag name', value = 'iframe')
WV_powerbi_first <- WV_powerbi[[1]]
Sys.sleep(5)
WV_powerbiurl <- WV_powerbi_first$getElementAttribute("src") # Doing this because the powerbi site is scrapable but the WV health one is not.
WV_powerbiurl <- unlist(WV_powerbiurl)
Sys.sleep(5)
remDr$navigate(WV_powerbiurl)
Sys.sleep(15)
All_WV_Buttons <- remDr$findElements(using = "tag name", value = "button")
Sys.sleep(5)
WV_ByCounty_Button <- All_WV_Buttons[[2]]
Sys.sleep(5)
WV_ByCounty_Button$getElementText()
Sys.sleep(5)
WV_ByCounty_Button$clickElement()
WV_Cases_Div <- remDr$findElement(using = "xpath", value = "/html/body/div[1]/ui-view/div/div[1]/div/div/div/div/exploration-container/exploration-container-legacy/div/div/exploration-host/div/div/exploration/div/explore-canvas-modern/div/div[2]/div/div[2]/div[2]/visual-container-repeat/visual-container-modern[13]/transform/div/div[3]/visual-modern/div/div/div[2]/div[1]/div[4]/div/div[2]/div[2]")
WV_Cases_Div$getElementText()
WV_Deaths_Div <- remDr$findElement(using = "xpath", value = "/html/body/div[1]/ui-view/div/div[1]/div/div/div/div/exploration-container/exploration-container-legacy/div/div/exploration-host/div/div/exploration/div/explore-canvas-modern/div/div[2]/div/div[2]/div[2]/visual-container-repeat/visual-container-modern[13]/transform/div/div[3]/visual-modern/div/div/div[2]/div[1]/div[4]/div/div[2]/div[3]")
WV_Deaths_Div$getElementText()
WV_CountiesDiv <- remDr$findElement(using = "class", value = "bodyCells")
WV_CountiesDiv$getElementText()
WV_CountiesDiv[[1]]$getElementText()
WV_Counties <- WV_CountiesDiv$getElementText()
WV_Counties %>%
unlist()
WV_Counties <- WV_Counties %>%
unlist()
WV_Counties %>% str_split("\\n") %>% unlist()
WV_Counties_Unsplit <- WV_Counties %>% str_split("\\n") %>% unlist()
make.names(str_trim(WV_Counties_Unsplit[1:3]))
WV_Headers <- c("County", "Cumulative.Cases", "Deaths")
WV_Counties_Unsplit %>% keep(str_detect, "[[:alpha:]]+")
WV_Counties_Unsplit %>% keep(str_detect, "[[:alpha:]]+") %>% str_trim()
WV_County_Names <- WV_Counties_Unsplit %>% keep(str_detect, "[[:alpha:]]+") %>% str_trim()
keep(str_detect, "\\d+") %>% str_replace_all("\\s", "0")
WV_Counties_Unsplit %>% keep(str_detect, "\\d+") %>% str_replace_all("\\s", "0")
WV_Values <- WV_Counties_Unsplit %>% keep(str_detect, "\\d+") %>% str_replace_all("\\s", "0")
for (i in 1:(length(WV_County_Names) * 2 + (length(WV_Values[substring(WV_Values, 1, 1) == "0" & str_length(WV_Values) > 1])))) {
if (substring(WV_Values[i], 1, 1) == "0" & str_length(WV_Values[i]) > 1) {
WV_Values <- append(WV_Values, unlist(strsplit(WV_Values[i], "")), after = i)
}
}
for (i in seq_along(WV_Values)) {
if (substring(WV_Values[i], 1, 1) == "0" & str_length(WV_Values[i]) > 1) {
WV_Values[i] <- NA
}
}
WV_Values
WV_Values[!is.na(WV_Values)]
WV_Cases_Deaths <- WV_Values[!is.na(WV_Values)]
WV_Cases_Deaths[1:length(WV_County_Names)]
WV_Cases_Deaths[(length(WV_County_Names) + 1):length(WV_Cases_Deaths)]
WV_County_Names
WV_Values
WV_Counties_Unsplit
WV_Counties_Unsplit %>% keep(str_detect, "\\d+")
WV_Counties_Unsplit %>% keep(str_detect, "\\d+") %>% str_replace_all("\\s", "0")
WV_Values <- WV_Counties_Unsplit %>% keep(str_detect, "\\d+") %>% str_replace_all("\\s", "0")
WV_Values
1:(length(WV_County_Names) * 2
1:(length(WV_County_Names) * 2 + (length(WV_Values[substring(WV_Values, 1, 1) == "0" & str_length(WV_Values) > 1])))
length(WV_Values[substring(WV_Values, 1, 1) == "0" & str_length(WV_Values) > 1])
length(WV_County_Names) * 2
# Not elegant but gets the job done
# WV_Values <- WV_Counties_Values %>% str_replace_all("\\s", "0")
#
# WV_Values <- WV_Values %>% keep(str_detect, "\\d+")
# WV_County_Names <- WV_Counties_Values %>% keep(str_detect, "[[:alpha:]]+")
length(WV_Values) + 19
WV_County_Names
WV_County_Names["Lincoln"]
WV_County_Names[WV_County_Names == "Lincoln"]
WV_County_Names %>% detect({.x == "Lincoln"})
WV_County_Names %>% detect(~{.x == "Lincoln"})
WV_County_Names %>% detect_index(~{.x == "Lincoln"})
WV_County_Names[1:(WV_County_Names %>% detect_index(~{.x == "Lincoln"}))]
WV_County_Names <- WV_County_Names[1:(WV_County_Names %>% detect_index(~{.x == "Lincoln"}))]
for (i in 1:(length(WV_County_Names) * 2 + (length(WV_Values[substring(WV_Values, 1, 1) == "0" & str_length(WV_Values) > 1])))) {
if (substring(WV_Values[i], 1, 1) == "0" & str_length(WV_Values[i]) > 1) {
WV_Values <- append(WV_Values, unlist(strsplit(WV_Values[i], "")), after = i)
}
}
for (i in seq_along(WV_Values)) {
if (substring(WV_Values[i], 1, 1) == "0" & str_length(WV_Values[i]) > 1) {
WV_Values[i] <- NA
}
}
WV_Cases_Deaths <- WV_Values[!is.na(WV_Values)]
WV_Cases <- WV_Cases_Deaths[1:length(WV_County_Names)]
WV_Deaths <- WV_Cases_Deaths[(length(WV_County_Names) + 1):length(WV_Cases_Deaths)]
# WV_Values_Test <- WV_Counties_Values %>%
#   map_dbl(possibly(function(x) {
#    as.double(x)
#   }, otherwise = NA_real_
#   )
#   )
#
# WV_Values <- WV_Values_Test[!is.na(WV_Values_Test)]
#
#
# WV_County_Names_Test <- WV_Counties_Values %>%
#   map_lgl(possibly(function(x) {
#     str_detect(x, "[[:alpha:]]+")#str_extract_all(x, "[[:alpha:]]+")
#   }, otherwise = NA))
#
#
# WV_County_Names <- WV_Counties_Values[WV_County_Names_Test]
WV_CountiesDFCleaned <- tibble(WV_County_Names, WV_Cases, WV_Deaths)
colnames(WV_CountiesDFCleaned) <- WV_Headers
# This is not needed anymore after county breakout total was moved to a different format and location
# on WV health department website.
# WV_CountiesDF <- WV_Counties %>%
#   str_remove_all("CONFIRMED CASES PER COUNTY: ") %>%
#   str_replace_all("\\(", "") %>%
#   str_replace_all("\\)", "") %>%
#   str_split(", ") %>%
#   as_tibble("Combined")
#
# names(WV_CountiesDF) <- "Combined"
#
# WV_CountiesDFCleaned <- WV_CountiesDF %>%
#   separate(Combined, into = c("County", "Cases"), sep = " ") %>%
#   mutate(Cases = as.integer(Cases))
# Adding Date and State Name columns
WV_CountiesDFCleaned$Date <- Sys.Date() - 1
WV_CountiesDFCleaned$State <- "West Virginia"
# Joining in state abbreviation and FIPS code columns
WV_CountiesDFCleaned <- WV_CountiesDFCleaned %>%
mutate(Cases = as.integer(Cumulative.Cases), Deaths = as.integer(Deaths)) %>%
left_join(stateConversions, by = c("State" = "Full_Name")) %>%
left_join(countyStateFIPS, by = c("Abbr" = "State", "County" = "Name")) %>%
dplyr::select(County, Cases, Deaths, Date, State, Abbr, FIPS)
WV_County_Names
WV_Values
WV_Values <- WV_Counties_Unsplit %>% keep(str_detect, "\\d+") %>% str_replace_all("\\s", "0")
WV_Values
for (i in 1:(length(WV_County_Names) * 2 + (length(WV_Values[substring(WV_Values, 1, 1) == "0" & str_length(WV_Values) > 1])))) {
if (substring(WV_Values[i], 1, 1) == "0" & str_length(WV_Values[i]) > 1) {
WV_Values <- append(WV_Values, unlist(strsplit(WV_Values[i], "")), after = i)
}
}
WV_Values
for (i in seq_along(WV_Values)) {
if (substring(WV_Values[i], 1, 1) == "0" & str_length(WV_Values[i]) > 1) {
WV_Values[i] <- NA
}
}
WV_Values
WV_Values[!is.na(WV_Values)]
WV_Values <- WV_Counties_Unsplit %>% keep(str_detect, "\\d+") %>% str_replace_all("\\s", "0")
WV_Values
WV_Counties_Unsplit
WV_Counties_Unsplit %>% detect_index(~{str_detect(.x, "Logan")})
WV_Counties_Unsplit[1:(WV_Counties_Unsplit %>% detect_index(~{str_detect(.x, "Logan")}))]
1:(WV_Counties_Unsplit %>% detect_index(~{str_detect(.x, "Logan")})) - 1
WV_Counties_Unsplit[1:(WV_Counties_Unsplit %>% detect_index(~{str_detect(.x, "Logan")})) - 1]
WV_Counties_Unsplit <- WV_Counties_Unsplit[1:(WV_Counties_Unsplit %>% detect_index(~{str_detect(.x, "Logan")})) - 1]
WV_County_Names <- WV_Counties_Unsplit %>% keep(str_detect, "[[:alpha:]]+") %>% str_trim()
WV_Values <- WV_Counties_Unsplit %>% keep(str_detect, "\\d+") %>% str_replace_all("\\s", "0")
for (i in 1:(length(WV_County_Names) * 2 + (length(WV_Values[substring(WV_Values, 1, 1) == "0" & str_length(WV_Values) > 1])))) {
if (substring(WV_Values[i], 1, 1) == "0" & str_length(WV_Values[i]) > 1) {
WV_Values <- append(WV_Values, unlist(strsplit(WV_Values[i], "")), after = i)
}
}
for (i in seq_along(WV_Values)) {
if (substring(WV_Values[i], 1, 1) == "0" & str_length(WV_Values[i]) > 1) {
WV_Values[i] <- NA
}
}
WV_Cases_Deaths <- WV_Values[!is.na(WV_Values)]
WV_Cases <- WV_Cases_Deaths[1:length(WV_County_Names)]
WV_Deaths <- WV_Cases_Deaths[(length(WV_County_Names) + 1):length(WV_Cases_Deaths)]
# WV_Values_Test <- WV_Counties_Values %>%
#   map_dbl(possibly(function(x) {
#    as.double(x)
#   }, otherwise = NA_real_
#   )
#   )
#
# WV_Values <- WV_Values_Test[!is.na(WV_Values_Test)]
#
#
# WV_County_Names_Test <- WV_Counties_Values %>%
#   map_lgl(possibly(function(x) {
#     str_detect(x, "[[:alpha:]]+")#str_extract_all(x, "[[:alpha:]]+")
#   }, otherwise = NA))
#
#
# WV_County_Names <- WV_Counties_Values[WV_County_Names_Test]
WV_CountiesDFCleaned <- tibble(WV_County_Names, WV_Cases, WV_Deaths)
colnames(WV_CountiesDFCleaned) <- WV_Headers
# This is not needed anymore after county breakout total was moved to a different format and location
# on WV health department website.
# WV_CountiesDF <- WV_Counties %>%
#   str_remove_all("CONFIRMED CASES PER COUNTY: ") %>%
#   str_replace_all("\\(", "") %>%
#   str_replace_all("\\)", "") %>%
#   str_split(", ") %>%
#   as_tibble("Combined")
#
# names(WV_CountiesDF) <- "Combined"
#
# WV_CountiesDFCleaned <- WV_CountiesDF %>%
#   separate(Combined, into = c("County", "Cases"), sep = " ") %>%
#   mutate(Cases = as.integer(Cases))
# Adding Date and State Name columns
WV_Counties_Unsplit
WV_Counties %>% str_split("\\n") %>% unlist()
WV_Counties_Unsplit[1:(WV_Counties_Unsplit %>% detect_index(~{str_detect(.x, "Logan")}))]
WV_Counties_Unsplit <- WV_Counties %>% str_split("\\n") %>% unlist()
WV_Counties_Unsplit[1:(WV_Counties_Unsplit %>% detect_index(~{str_detect(.x, "Logan")}))]
WV_Counties_Unsplit <- WV_Counties_Unsplit[1:(WV_Counties_Unsplit %>% detect_index(~{str_detect(.x, "Logan")}))]
WV_Counties_Unsplit %>% str_remove("Logan")
WV_Counties_Unsplit <- WV_Counties_Unsplit %>% str_remove("Logan")
WV_Counties_Unsplit <- WV_Counties_Unsplit %>% str_remove("Logan")
WV_Counties_Unsplit
WV_Counties_Unsplit %>% discard(str_detect, "[[:alpha:]]+")
WV_Counties_Unsplit %>% purrr::discard(str_detect, "[[:alpha:]]+")
WV_Counties_Unsplit %>% purrr::discard(str_detect, "[[:alpha:]]+") %>% str_replace_all("\\s", "0")
WV_Counties_Unsplit %>% keep(str_detect, "[[:alpha:]]+") %>% str_trim()
WV_County_Names <- WV_Counties_Unsplit %>% keep(str_detect, "[[:alpha:]]+") %>% str_trim()
WV_Values <- WV_Counties_Unsplit %>% purrr::discard(str_detect, "[[:alpha:]]+") %>% str_replace_all("\\s", "0")
for (i in 1:(length(WV_County_Names) * 2 + (length(WV_Values[substring(WV_Values, 1, 1) == "0" & str_length(WV_Values) > 1])))) {
if (substring(WV_Values[i], 1, 1) == "0" & str_length(WV_Values[i]) > 1) {
WV_Values <- append(WV_Values, unlist(strsplit(WV_Values[i], "")), after = i)
}
}
for (i in seq_along(WV_Values)) {
if (substring(WV_Values[i], 1, 1) == "0" & str_length(WV_Values[i]) > 1) {
WV_Values[i] <- NA
}
}
WV_Cases_Deaths <- WV_Values[!is.na(WV_Values)]
WV_Cases <- WV_Cases_Deaths[1:length(WV_County_Names)]
WV_Deaths <- WV_Cases_Deaths[(length(WV_County_Names) + 1):length(WV_Cases_Deaths)]
# WV_Values_Test <- WV_Counties_Values %>%
#   map_dbl(possibly(function(x) {
#    as.double(x)
#   }, otherwise = NA_real_
#   )
#   )
#
# WV_Values <- WV_Values_Test[!is.na(WV_Values_Test)]
#
#
# WV_County_Names_Test <- WV_Counties_Values %>%
#   map_lgl(possibly(function(x) {
#     str_detect(x, "[[:alpha:]]+")#str_extract_all(x, "[[:alpha:]]+")
#   }, otherwise = NA))
#
#
# WV_County_Names <- WV_Counties_Values[WV_County_Names_Test]
WV_CountiesDFCleaned <- tibble(WV_County_Names, WV_Cases, WV_Deaths)
colnames(WV_CountiesDFCleaned) <- WV_Headers
# This is not needed anymore after county breakout total was moved to a different format and location
# on WV health department website.
# WV_CountiesDF <- WV_Counties %>%
#   str_remove_all("CONFIRMED CASES PER COUNTY: ") %>%
#   str_replace_all("\\(", "") %>%
#   str_replace_all("\\)", "") %>%
#   str_split(", ") %>%
#   as_tibble("Combined")
#
# names(WV_CountiesDF) <- "Combined"
#
# WV_CountiesDFCleaned <- WV_CountiesDF %>%
#   separate(Combined, into = c("County", "Cases"), sep = " ") %>%
#   mutate(Cases = as.integer(Cases))
# Adding Date and State Name columns
WV_CountiesDFCleaned
WV_CountiesDFCleaned$Date <- Sys.Date() - 2
WV_CountiesDFCleaned$State <- "West Virginia"
# Joining in state abbreviation and FIPS code columns
WV_CountiesDFCleaned <- WV_CountiesDFCleaned %>%
mutate(Cases = as.integer(Cumulative.Cases), Deaths = as.integer(Deaths)) %>%
left_join(stateConversions, by = c("State" = "Full_Name")) %>%
left_join(countyStateFIPS, by = c("Abbr" = "State", "County" = "Name")) %>%
dplyr::select(County, Cases, Deaths, Date, State, Abbr, FIPS)
WV_CountiesDFCleaned
WV_Counties <- read_csv("WV_Counties.csv")
WV_Counties <- bind_rows(WV_CountiesDFCleaned, WV_Counties)
write_csv(WV_Counties, "WV_Counties.csv")
